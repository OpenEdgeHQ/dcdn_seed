// Code generated by hertz generator.

package dcdn_seed

import (
	"context"
	"encoding/base64"
	"github.com/bytedance/gopkg/util/logger"
	"net/url"
	"seed.manager/biz/dal"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	dcdn_seed "seed.manager/biz/model/dcdn_seed"
)

// ReportSeedAll .
// @router /seed_manager/device/report/all [POST]
func ReportSeedAll(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dcdn_seed.ReportSeedReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	allList, err := dal.GetALlSeedInfo(req.PeerID)
	if err != nil {
		ResponseError(c, ctx, dcdn_seed.ErrorCode_GetPeerFileListFailed, err.Error())
		return
	}

	err = dal.AddPeerInfo(ctx, req.PeerID, &dal.PeerInfo{Address: req.ServiceAddress})
	if err != nil {
		ResponseError(c, ctx, dcdn_seed.ErrorCode_AddPeerInfoFailed, err.Error())
		return
	}

	err = dal.AddSeedInfo(ctx, req.PeerID, req.Files)
	if err != nil {
		ResponseError(c, ctx, dcdn_seed.ErrorCode_AddPeerSeedFailed, err.Error())
		return
	}

	// 删除已经被删除的文件列表
	m := map[int32]map[string]struct{}{}
	for _, v := range req.Files {
		if m[v.AppID] == nil {
			m[v.AppID] = map[string]struct{}{}
		}
		m[v.AppID][req.ServiceAddress] = struct{}{}
	}

	for _, v := range allList {
		m1, ok := m[v.AppID]
		if !ok {
			_ = dal.RemoveSeedInfo(ctx, req.PeerID, v.AppID, v.Fid)
		} else if _, ok = m1[v.Fid]; !ok {
			_ = dal.RemoveSeedInfo(ctx, req.PeerID, v.AppID, v.Fid)
		}
	}

	resp := new(dcdn_seed.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetDownloadTask .
// @router /seed_manager/device/task [GET]
func GetDownloadTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dcdn_seed.DeviceBasicQueryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(dcdn_seed.DownloadTaskInfo)
	resp.Tasks, err = dal.GetTask(ctx, req.GetPeerID(), 3)
	if err != nil {
		ResponseError(c, ctx, dcdn_seed.ErrorCode_GetTaskFailed, err.Error())
		return
	}

	ResponseSuccess(c, resp)
}

// QueryFidPeer .
// @router /seed_manager/sdk/list [GET]
func QueryFidPeer(ctx context.Context, c *app.RequestContext) {
	var err error
	var req dcdn_seed.QueryFidPeerReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	fid := req.GetFID()
	if !req.IsSetFID() {
		fid, err = getFidByURL(req.GetURL())
		if err != nil {
			ResponseError(c, ctx, dcdn_seed.ErrorCode_URLParseFailed, err.Error())
			return
		}
	}

	peer, err := dal.QueryFidPeers(ctx, req.GetAppID(), fid)
	if err != nil {
		ResponseError(c, ctx, dcdn_seed.ErrorCode_GetPeerFileListFailed, err.Error())
		return
	}

	resp := new(dcdn_seed.QueryFidPeerData)
	for _, v := range peer {
		info, err := dal.GetPeerInfo(v)
		if err != nil {
			logger.CtxErrorf(ctx, "query peer=%s info %+v", v, err)
			continue
		}
		resp.PeerList = append(resp.PeerList, &dcdn_seed.PeerInfo{PeerID: v, ServiceAddress: info.Address})
	}

	if len(peer) <= 3 {
		_ = dal.AddTask(ctx, req.GetAppID(), fid, req.GetURL(), 3)
	}

	ResponseSuccess(c, resp)
}

func getFidByURL(u string) (fid string, err error) {
	address, err := url.Parse(u)
	if err != nil {
		return
	}

	return base64.StdEncoding.EncodeToString([]byte(address.Path)), nil
}
